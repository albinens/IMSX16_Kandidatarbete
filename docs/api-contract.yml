openapi: '3.0.2'
info:
  title: 'Chalmers Room Availability'
  version: '1.0'
  description: 'API to get the current (and past) availability of group rooms at Chalmers University of Technology.'

servers:
  - url: '/api'
    description: 'The base path for all API requests.'

paths:
  /current:
    get:
      summary: 'Gets a list of all rooms and their current availability.'
      tags:
        - 'Occupancy'
      responses:
        '200':
          description: 'A list of all rooms and their current availability.'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Room'
        '500':
          description: 'Internal Server Error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /current/{room}:
    get:
      summary: 'Gets the current availability of a specific room.'
      tags:
        - 'Occupancy'
      parameters:
        - name: 'room'
          in: 'path'
          required: true
          description: 'The name of the room.'
          schema:
            type: 'string'
      responses:
        '200':
          description: 'The current availability of the specified room.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: 'The specified room does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: 'Internal Server Error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /add-room:
    post:
      summary: 'Adds a new room for tracking status of.'
      tags:
        - 'Room'
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoom'
      responses:
        '201':
          description: 'The room was successfully added.'
        '500':
          description: 'Internal Server Error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '400':
          description: 'Request not formatted correctly.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Unauthorized.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '409':
          description: 'The room already exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
  /remove-room/{room}:
    delete:
      summary: 'Removes a room from the tracking list.'
      tags:
        - 'Room'
      security:
        - ApiKey: []
      parameters:
        - name: 'room'
          in: 'path'
          required: true
          description: 'The name of the room.'
          schema:
            type: 'string'
      responses:
        '200':
          description: 'The room was successfully removed.'
        '404':
          description: 'The specified room does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: 'Internal Server Error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '401':
          description: 'Unauthorized.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /stats/daily-average/{from}/{to}:
    get:
      summary: 'Get the weekday average occupancy for rooms between two timestamps.'
      tags:
        - 'Statistics'
      parameters:
        - name: 'from'
          in: 'path'
          required: true
          description: 'The start timestamp.'
          schema:
            type: 'integer'
            format: 'int64'
            example: 1614556800000
        - name: 'to'
          in: 'path'
          required: true
          description: 'The end timestamp.'
          schema:
            type: 'integer'
            format: 'int64'
            example: 1614643200000
      responses:
        '200':
          description: 'The weekday average occupancy for rooms between the two timestamps.'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    roomName:
                      type: string
                      description: 'The name of the room.'
                      example: 'EG-2515'
                    weekdayAverages:
                      type: 'object'
                      properties:
                        monday:
                          type: 'number'
                          description: 'The average occupancy on Mondays.'
                          example: 3
                        tuesday:
                          type: 'number'
                          description: 'The average occupancy on Tuesdays.'
                          example: 2.34
                        wednesday:
                          type: 'number'
                          description: 'The average occupancy on Wednesdays.'
                          example: 2.83
                        thursday:
                          type: 'number'
                          description: 'The average occupancy on Thursdays.'
                          example: 4
                        friday:
                          type: 'number'
                          description: 'The average occupancy on Fridays.'
                          example: 5
                        saturday:
                          type: 'number'
                          description: 'The average occupancy on Saturdays.'
                          example: 3.2
                        sunday:
                          type: 'number'
                          description: 'The average occupancy on Sundays.'
                          example: 0.5
        '500':
          description: 'Internal Server Error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '400':
          description: 'The timestamps are not a valid range.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Unauthorized.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: 'No data found for the given time range.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /stats/raw-serial/{from}/{to}/{resolution}:
    get:
      summary: 'Get the raw serial data for rooms between two timestamps.'
      tags:
        - 'Statistics'
      security:
        - ApiKey: []
      parameters:
        - name: 'from'
          in: 'path'
          required: true
          description: 'The start timestamp.'
          schema:
            type: 'integer'
            format: 'int64'
            example: 1614556800000
        - name: 'to'
          in: 'path'
          required: true
          description: 'The end timestamp.'
          schema:
            type: 'integer'
            format: 'int64'
            example: 1614643200000
        - name: 'resolution'
          in: 'path'
          required: true
          description: 'The resolution of the data points in time, such as 5m, 1h, 1d. Will be the sliding rolling average.'
          schema:
            type: 'string'
            example: '5m'
      responses:
        '200':
          description: 'The raw serial data for rooms between the two timestamps.'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    roomName:
                      type: 'string'
                      description: 'The name of the room.'
                      example: 'EG-2515'
                    data:
                      type: 'array'
                      items:
                        type: 'object'
                        properties:
                          timestamp:
                            type: 'integer'
                            format: 'int64'
                            description: 'The timestamp of the data point.'
                            example: 1614556800000
                          occupancy:
                            type: 'number'
                            description: 'The occupancy of the room at the timestamp.'
                            example: 3
        '500':
          description: 'Internal Server Error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '400':
          description: 'The timestamps are not a valid range.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Unauthorized.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

components:
  schemas:
    # Error responses
    InternalServerError:
      type: 'object'
      properties:
        error:
          type: 'string'
          description: 'A human-readable error message.'
          example: 'Internal Server Error.'
        code:
          type: 'integer'
          description: 'A machine-readable error code.'
          example: 500
    NotFoundError:
      type: 'object'
      properties:
        error:
          type: 'string'
          description: 'A human-readable error message.'
          example: 'The specified room does not exist.'
        code:
          type: 'integer'
          description: 'A machine-readable error code.'
          example: 404
    BadRequestError:
      type: 'object'
      properties:
        error:
          type: 'string'
          description: 'A human-readable error message.'
          example: 'Request not formatted correctly.'
        code:
          type: 'integer'
          description: 'A machine-readable error code.'
          example: 400
    UnauthorizedError:
      type: 'object'
      properties:
        error:
          type: 'string'
          description: 'A human-readable error message.'
          example: 'You are not authorized to perform this action.'
        code:
          type: 'integer'
          description: 'A machine-readable error code.'
          example: 401
    ConflictError:
      type: 'object'
      properties:
        error:
          type: 'string'
          description: 'A human-readable error message.'
          example: 'The room already exists.'
        code:
          type: 'integer'
          description: 'A machine-readable error code.'
          example: 409

    # Room data
    Status:
      type: 'string'
      enum:
        - 'available'
        - 'occupied'
        - 'booked'
      description: 'The status of the room. Can be "available", "occupied" or "booked".'
    Room:
      type: 'object'
      properties:
        room:
          type: 'string'
          description: 'The name of the room.'
          example: 'EG-2515'
        building:
          type: 'string'
          description: 'The building the room is located in.'
          example: 'NC'
        available:
          $ref: '#/components/schemas/Status'
    AddRoom:
      type: 'object'
      properties:
        name:
          type: 'string'
          description: 'The name of the room.'
          example: 'EG-2515'
        building:
          type: 'string'
          description: 'The building the room is located in.'
          example: 'NC'
        mac-address:
          type: 'string'
          description: 'The MAC address of the sensor in the room.'
          example: '00:00:00:00:00:00'

  securitySchemes:
    ApiKey:
      type: 'apiKey'
      in: 'header'
      name: 'X-API-KEY'
